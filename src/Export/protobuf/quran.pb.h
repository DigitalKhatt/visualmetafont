// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quran.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_quran_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_quran_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_quran_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_quran_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quran_2eproto;
namespace protobuf {
class Font;
struct FontDefaultTypeInternal;
extern FontDefaultTypeInternal _Font_default_instance_;
class Font_GlyphsEntry_DoNotUse;
struct Font_GlyphsEntry_DoNotUseDefaultTypeInternal;
extern Font_GlyphsEntry_DoNotUseDefaultTypeInternal _Font_GlyphsEntry_DoNotUse_default_instance_;
class Glyph;
struct GlyphDefaultTypeInternal;
extern GlyphDefaultTypeInternal _Glyph_default_instance_;
class GlyphLayout;
struct GlyphLayoutDefaultTypeInternal;
extern GlyphLayoutDefaultTypeInternal _GlyphLayout_default_instance_;
class LayOut;
struct LayOutDefaultTypeInternal;
extern LayOutDefaultTypeInternal _LayOut_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Page;
struct PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathElem;
struct PathElemDefaultTypeInternal;
extern PathElemDefaultTypeInternal _PathElem_default_instance_;
class Sura;
struct SuraDefaultTypeInternal;
extern SuraDefaultTypeInternal _Sura_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::Font* Arena::CreateMaybeMessage<::protobuf::Font>(Arena*);
template<> ::protobuf::Font_GlyphsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::Font_GlyphsEntry_DoNotUse>(Arena*);
template<> ::protobuf::Glyph* Arena::CreateMaybeMessage<::protobuf::Glyph>(Arena*);
template<> ::protobuf::GlyphLayout* Arena::CreateMaybeMessage<::protobuf::GlyphLayout>(Arena*);
template<> ::protobuf::LayOut* Arena::CreateMaybeMessage<::protobuf::LayOut>(Arena*);
template<> ::protobuf::Line* Arena::CreateMaybeMessage<::protobuf::Line>(Arena*);
template<> ::protobuf::Page* Arena::CreateMaybeMessage<::protobuf::Page>(Arena*);
template<> ::protobuf::Path* Arena::CreateMaybeMessage<::protobuf::Path>(Arena*);
template<> ::protobuf::PathElem* Arena::CreateMaybeMessage<::protobuf::PathElem>(Arena*);
template<> ::protobuf::Sura* Arena::CreateMaybeMessage<::protobuf::Sura>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class Font_GlyphsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Font_GlyphsEntry_DoNotUse, 
    int32_t, ::protobuf::Glyph,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Font_GlyphsEntry_DoNotUse, 
    int32_t, ::protobuf::Glyph,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Font_GlyphsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Font_GlyphsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Font_GlyphsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Font_GlyphsEntry_DoNotUse& other);
  static const Font_GlyphsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Font_GlyphsEntry_DoNotUse*>(&_Font_GlyphsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_quran_2eproto;
};

// -------------------------------------------------------------------

class Font final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Font) */ {
 public:
  inline Font() : Font(nullptr) {}
  ~Font() override;
  explicit PROTOBUF_CONSTEXPR Font(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Font(const Font& from);
  Font(Font&& from) noexcept
    : Font() {
    *this = ::std::move(from);
  }

  inline Font& operator=(const Font& from) {
    CopyFrom(from);
    return *this;
  }
  inline Font& operator=(Font&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Font& default_instance() {
    return *internal_default_instance();
  }
  static inline const Font* internal_default_instance() {
    return reinterpret_cast<const Font*>(
               &_Font_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Font& a, Font& b) {
    a.Swap(&b);
  }
  inline void Swap(Font* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Font* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Font* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Font>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Font& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Font& from) {
    Font::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Font* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Font";
  }
  protected:
  explicit Font(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGlyphsFieldNumber = 1,
  };
  // map<int32, .protobuf.Glyph> glyphs = 1;
  int glyphs_size() const;
  private:
  int _internal_glyphs_size() const;
  public:
  void clear_glyphs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >&
      _internal_glyphs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >*
      _internal_mutable_glyphs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >&
      glyphs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >*
      mutable_glyphs();

  // @@protoc_insertion_point(class_scope:protobuf.Font)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Font_GlyphsEntry_DoNotUse,
        int32_t, ::protobuf::Glyph,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> glyphs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class Glyph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Glyph) */ {
 public:
  inline Glyph() : Glyph(nullptr) {}
  ~Glyph() override;
  explicit PROTOBUF_CONSTEXPR Glyph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Glyph(const Glyph& from);
  Glyph(Glyph&& from) noexcept
    : Glyph() {
    *this = ::std::move(from);
  }

  inline Glyph& operator=(const Glyph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Glyph& operator=(Glyph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Glyph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Glyph* internal_default_instance() {
    return reinterpret_cast<const Glyph*>(
               &_Glyph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Glyph& a, Glyph& b) {
    a.Swap(&b);
  }
  inline void Swap(Glyph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Glyph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Glyph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Glyph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Glyph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Glyph& from) {
    Glyph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Glyph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Glyph";
  }
  protected:
  explicit Glyph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxFieldNumber = 2,
    kDefaultFieldNumber = 3,
    kLimitsFieldNumber = 4,
    kMinLeftFieldNumber = 5,
    kMaxLeftFieldNumber = 6,
    kMinRightFieldNumber = 7,
    kMaxRightFieldNumber = 8,
    kNameFieldNumber = 1,
  };
  // repeated double bbox = 2;
  int bbox_size() const;
  private:
  int _internal_bbox_size() const;
  public:
  void clear_bbox();
  private:
  double _internal_bbox(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bbox() const;
  void _internal_add_bbox(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bbox();
  public:
  double bbox(int index) const;
  void set_bbox(int index, double value);
  void add_bbox(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bbox() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bbox();

  // repeated .protobuf.Path default = 3;
  int default__size() const;
  private:
  int _internal_default__size() const;
  public:
  void clear_default_();
  ::protobuf::Path* mutable_default_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
      mutable_default_();
  private:
  const ::protobuf::Path& _internal_default_(int index) const;
  ::protobuf::Path* _internal_add_default_();
  public:
  const ::protobuf::Path& default_(int index) const;
  ::protobuf::Path* add_default_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
      default_() const;

  // repeated double limits = 4;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  private:
  double _internal_limits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_limits() const;
  void _internal_add_limits(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_limits();
  public:
  double limits(int index) const;
  void set_limits(int index, double value);
  void add_limits(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      limits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_limits();

  // repeated .protobuf.Path minLeft = 5;
  int minleft_size() const;
  private:
  int _internal_minleft_size() const;
  public:
  void clear_minleft();
  ::protobuf::Path* mutable_minleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
      mutable_minleft();
  private:
  const ::protobuf::Path& _internal_minleft(int index) const;
  ::protobuf::Path* _internal_add_minleft();
  public:
  const ::protobuf::Path& minleft(int index) const;
  ::protobuf::Path* add_minleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
      minleft() const;

  // repeated .protobuf.Path maxLeft = 6;
  int maxleft_size() const;
  private:
  int _internal_maxleft_size() const;
  public:
  void clear_maxleft();
  ::protobuf::Path* mutable_maxleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
      mutable_maxleft();
  private:
  const ::protobuf::Path& _internal_maxleft(int index) const;
  ::protobuf::Path* _internal_add_maxleft();
  public:
  const ::protobuf::Path& maxleft(int index) const;
  ::protobuf::Path* add_maxleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
      maxleft() const;

  // repeated .protobuf.Path minRight = 7;
  int minright_size() const;
  private:
  int _internal_minright_size() const;
  public:
  void clear_minright();
  ::protobuf::Path* mutable_minright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
      mutable_minright();
  private:
  const ::protobuf::Path& _internal_minright(int index) const;
  ::protobuf::Path* _internal_add_minright();
  public:
  const ::protobuf::Path& minright(int index) const;
  ::protobuf::Path* add_minright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
      minright() const;

  // repeated .protobuf.Path maxRight = 8;
  int maxright_size() const;
  private:
  int _internal_maxright_size() const;
  public:
  void clear_maxright();
  ::protobuf::Path* mutable_maxright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
      mutable_maxright();
  private:
  const ::protobuf::Path& _internal_maxright(int index) const;
  ::protobuf::Path* _internal_add_maxright();
  public:
  const ::protobuf::Path& maxright(int index) const;
  ::protobuf::Path* add_maxright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
      maxright() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Glyph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bbox_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path > default__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > limits_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path > minleft_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path > maxleft_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path > minright_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path > maxright_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit PROTOBUF_CONSTEXPR Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Path& from) {
    Path::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // repeated .protobuf.PathElem elems = 1;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::protobuf::PathElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::PathElem >*
      mutable_elems();
  private:
  const ::protobuf::PathElem& _internal_elems(int index) const;
  ::protobuf::PathElem* _internal_add_elems();
  public:
  const ::protobuf::PathElem& elems(int index) const;
  ::protobuf::PathElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::PathElem >&
      elems() const;

  // repeated double color = 2;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  double _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_color() const;
  void _internal_add_color(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_color();
  public:
  double color(int index) const;
  void set_color(int index, double value);
  void add_color(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_color();

  // @@protoc_insertion_point(class_scope:protobuf.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::PathElem > elems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class PathElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.PathElem) */ {
 public:
  inline PathElem() : PathElem(nullptr) {}
  ~PathElem() override;
  explicit PROTOBUF_CONSTEXPR PathElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathElem(const PathElem& from);
  PathElem(PathElem&& from) noexcept
    : PathElem() {
    *this = ::std::move(from);
  }

  inline PathElem& operator=(const PathElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathElem& operator=(PathElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathElem* internal_default_instance() {
    return reinterpret_cast<const PathElem*>(
               &_PathElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PathElem& a, PathElem& b) {
    a.Swap(&b);
  }
  inline void Swap(PathElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PathElem& from) {
    PathElem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathElem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.PathElem";
  }
  protected:
  explicit PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated double points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  double _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_points() const;
  void _internal_add_points(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_points();
  public:
  double points(int index) const;
  void set_points(int index, double value);
  void add_points(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:protobuf.PathElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class LayOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.LayOut) */ {
 public:
  inline LayOut() : LayOut(nullptr) {}
  ~LayOut() override;
  explicit PROTOBUF_CONSTEXPR LayOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayOut(const LayOut& from);
  LayOut(LayOut&& from) noexcept
    : LayOut() {
    *this = ::std::move(from);
  }

  inline LayOut& operator=(const LayOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayOut& operator=(LayOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayOut* internal_default_instance() {
    return reinterpret_cast<const LayOut*>(
               &_LayOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LayOut& a, LayOut& b) {
    a.Swap(&b);
  }
  inline void Swap(LayOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LayOut& from) {
    LayOut::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.LayOut";
  }
  protected:
  explicit LayOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 1,
    kSurasFieldNumber = 2,
  };
  // repeated .protobuf.Page pages = 1;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::protobuf::Page* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Page >*
      mutable_pages();
  private:
  const ::protobuf::Page& _internal_pages(int index) const;
  ::protobuf::Page* _internal_add_pages();
  public:
  const ::protobuf::Page& pages(int index) const;
  ::protobuf::Page* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Page >&
      pages() const;

  // repeated .protobuf.Sura suras = 2;
  int suras_size() const;
  private:
  int _internal_suras_size() const;
  public:
  void clear_suras();
  ::protobuf::Sura* mutable_suras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Sura >*
      mutable_suras();
  private:
  const ::protobuf::Sura& _internal_suras(int index) const;
  ::protobuf::Sura* _internal_add_suras();
  public:
  const ::protobuf::Sura& suras(int index) const;
  ::protobuf::Sura* add_suras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Sura >&
      suras() const;

  // @@protoc_insertion_point(class_scope:protobuf.LayOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Page > pages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Sura > suras_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class Page final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Page) */ {
 public:
  inline Page() : Page(nullptr) {}
  ~Page() override;
  explicit PROTOBUF_CONSTEXPR Page(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Page(const Page& from);
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Page& operator=(Page&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Page& default_instance() {
    return *internal_default_instance();
  }
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }
  inline void Swap(Page* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Page* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Page* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Page& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Page& from) {
    Page::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Page";
  }
  protected:
  explicit Page(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 1,
  };
  // repeated .protobuf.Line lines = 1;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::protobuf::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Line >*
      mutable_lines();
  private:
  const ::protobuf::Line& _internal_lines(int index) const;
  ::protobuf::Line* _internal_add_lines();
  public:
  const ::protobuf::Line& lines(int index) const;
  ::protobuf::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Line >&
      lines() const;

  // @@protoc_insertion_point(class_scope:protobuf.Page)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Line > lines_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class Line final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit PROTOBUF_CONSTEXPR Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Line& from) {
    Line::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlyphsFieldNumber = 5,
    kTextFieldNumber = 4,
    kTypeFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // repeated .protobuf.GlyphLayout glyphs = 5;
  int glyphs_size() const;
  private:
  int _internal_glyphs_size() const;
  public:
  void clear_glyphs();
  ::protobuf::GlyphLayout* mutable_glyphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::GlyphLayout >*
      mutable_glyphs();
  private:
  const ::protobuf::GlyphLayout& _internal_glyphs(int index) const;
  ::protobuf::GlyphLayout* _internal_add_glyphs();
  public:
  const ::protobuf::GlyphLayout& glyphs(int index) const;
  ::protobuf::GlyphLayout* add_glyphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::GlyphLayout >&
      glyphs() const;

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::GlyphLayout > glyphs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int32_t type_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class GlyphLayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.GlyphLayout) */ {
 public:
  inline GlyphLayout() : GlyphLayout(nullptr) {}
  ~GlyphLayout() override;
  explicit PROTOBUF_CONSTEXPR GlyphLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlyphLayout(const GlyphLayout& from);
  GlyphLayout(GlyphLayout&& from) noexcept
    : GlyphLayout() {
    *this = ::std::move(from);
  }

  inline GlyphLayout& operator=(const GlyphLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlyphLayout& operator=(GlyphLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlyphLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlyphLayout* internal_default_instance() {
    return reinterpret_cast<const GlyphLayout*>(
               &_GlyphLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GlyphLayout& a, GlyphLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(GlyphLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlyphLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlyphLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlyphLayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlyphLayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GlyphLayout& from) {
    GlyphLayout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlyphLayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.GlyphLayout";
  }
  protected:
  explicit GlyphLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodepointFieldNumber = 1,
    kClusterFieldNumber = 2,
    kXAdvanceFieldNumber = 3,
    kXOffsetFieldNumber = 4,
    kYOffsetFieldNumber = 5,
    kColorFieldNumber = 6,
    kLefttatweelFieldNumber = 7,
    kRighttatweelFieldNumber = 8,
    kBeginsajdaFieldNumber = 9,
    kEndsajdaFieldNumber = 10,
  };
  // int32 codepoint = 1;
  void clear_codepoint();
  int32_t codepoint() const;
  void set_codepoint(int32_t value);
  private:
  int32_t _internal_codepoint() const;
  void _internal_set_codepoint(int32_t value);
  public:

  // int32 cluster = 2;
  void clear_cluster();
  int32_t cluster() const;
  void set_cluster(int32_t value);
  private:
  int32_t _internal_cluster() const;
  void _internal_set_cluster(int32_t value);
  public:

  // optional int32 x_advance = 3;
  bool has_x_advance() const;
  private:
  bool _internal_has_x_advance() const;
  public:
  void clear_x_advance();
  int32_t x_advance() const;
  void set_x_advance(int32_t value);
  private:
  int32_t _internal_x_advance() const;
  void _internal_set_x_advance(int32_t value);
  public:

  // optional int32 x_offset = 4;
  bool has_x_offset() const;
  private:
  bool _internal_has_x_offset() const;
  public:
  void clear_x_offset();
  int32_t x_offset() const;
  void set_x_offset(int32_t value);
  private:
  int32_t _internal_x_offset() const;
  void _internal_set_x_offset(int32_t value);
  public:

  // optional int32 y_offset = 5;
  bool has_y_offset() const;
  private:
  bool _internal_has_y_offset() const;
  public:
  void clear_y_offset();
  int32_t y_offset() const;
  void set_y_offset(int32_t value);
  private:
  int32_t _internal_y_offset() const;
  void _internal_set_y_offset(int32_t value);
  public:

  // optional int32 color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  int32_t color() const;
  void set_color(int32_t value);
  private:
  int32_t _internal_color() const;
  void _internal_set_color(int32_t value);
  public:

  // optional double lefttatweel = 7;
  bool has_lefttatweel() const;
  private:
  bool _internal_has_lefttatweel() const;
  public:
  void clear_lefttatweel();
  double lefttatweel() const;
  void set_lefttatweel(double value);
  private:
  double _internal_lefttatweel() const;
  void _internal_set_lefttatweel(double value);
  public:

  // optional double righttatweel = 8;
  bool has_righttatweel() const;
  private:
  bool _internal_has_righttatweel() const;
  public:
  void clear_righttatweel();
  double righttatweel() const;
  void set_righttatweel(double value);
  private:
  double _internal_righttatweel() const;
  void _internal_set_righttatweel(double value);
  public:

  // optional bool beginsajda = 9;
  bool has_beginsajda() const;
  private:
  bool _internal_has_beginsajda() const;
  public:
  void clear_beginsajda();
  bool beginsajda() const;
  void set_beginsajda(bool value);
  private:
  bool _internal_beginsajda() const;
  void _internal_set_beginsajda(bool value);
  public:

  // optional bool endsajda = 10;
  bool has_endsajda() const;
  private:
  bool _internal_has_endsajda() const;
  public:
  void clear_endsajda();
  bool endsajda() const;
  void set_endsajda(bool value);
  private:
  bool _internal_endsajda() const;
  void _internal_set_endsajda(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.GlyphLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t codepoint_;
    int32_t cluster_;
    int32_t x_advance_;
    int32_t x_offset_;
    int32_t y_offset_;
    int32_t color_;
    double lefttatweel_;
    double righttatweel_;
    bool beginsajda_;
    bool endsajda_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// -------------------------------------------------------------------

class Sura final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Sura) */ {
 public:
  inline Sura() : Sura(nullptr) {}
  ~Sura() override;
  explicit PROTOBUF_CONSTEXPR Sura(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sura(const Sura& from);
  Sura(Sura&& from) noexcept
    : Sura() {
    *this = ::std::move(from);
  }

  inline Sura& operator=(const Sura& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sura& operator=(Sura&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sura& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sura* internal_default_instance() {
    return reinterpret_cast<const Sura*>(
               &_Sura_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Sura& a, Sura& b) {
    a.Swap(&b);
  }
  inline void Swap(Sura* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sura* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sura* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sura>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sura& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sura& from) {
    Sura::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sura* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Sura";
  }
  protected:
  explicit Sura(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 page_number = 2;
  void clear_page_number();
  int32_t page_number() const;
  void set_page_number(int32_t value);
  private:
  int32_t _internal_page_number() const;
  void _internal_set_page_number(int32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Sura)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t page_number_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quran_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Font

// map<int32, .protobuf.Glyph> glyphs = 1;
inline int Font::_internal_glyphs_size() const {
  return _impl_.glyphs_.size();
}
inline int Font::glyphs_size() const {
  return _internal_glyphs_size();
}
inline void Font::clear_glyphs() {
  _impl_.glyphs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >&
Font::_internal_glyphs() const {
  return _impl_.glyphs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >&
Font::glyphs() const {
  // @@protoc_insertion_point(field_map:protobuf.Font.glyphs)
  return _internal_glyphs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >*
Font::_internal_mutable_glyphs() {
  return _impl_.glyphs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >*
Font::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.Font.glyphs)
  return _internal_mutable_glyphs();
}

// -------------------------------------------------------------------

// Glyph

// string name = 1;
inline void Glyph::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Glyph::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Glyph::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.Glyph.name)
}
inline std::string* Glyph::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protobuf.Glyph.name)
  return _s;
}
inline const std::string& Glyph::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Glyph::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Glyph::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Glyph::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.Glyph.name)
  return _impl_.name_.Release();
}
inline void Glyph::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.Glyph.name)
}

// repeated double bbox = 2;
inline int Glyph::_internal_bbox_size() const {
  return _impl_.bbox_.size();
}
inline int Glyph::bbox_size() const {
  return _internal_bbox_size();
}
inline void Glyph::clear_bbox() {
  _impl_.bbox_.Clear();
}
inline double Glyph::_internal_bbox(int index) const {
  return _impl_.bbox_.Get(index);
}
inline double Glyph::bbox(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.bbox)
  return _internal_bbox(index);
}
inline void Glyph::set_bbox(int index, double value) {
  _impl_.bbox_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.Glyph.bbox)
}
inline void Glyph::_internal_add_bbox(double value) {
  _impl_.bbox_.Add(value);
}
inline void Glyph::add_bbox(double value) {
  _internal_add_bbox(value);
  // @@protoc_insertion_point(field_add:protobuf.Glyph.bbox)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Glyph::_internal_bbox() const {
  return _impl_.bbox_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Glyph::bbox() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.bbox)
  return _internal_bbox();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Glyph::_internal_mutable_bbox() {
  return &_impl_.bbox_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Glyph::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.bbox)
  return _internal_mutable_bbox();
}

// repeated .protobuf.Path default = 3;
inline int Glyph::_internal_default__size() const {
  return _impl_.default__.size();
}
inline int Glyph::default__size() const {
  return _internal_default__size();
}
inline void Glyph::clear_default_() {
  _impl_.default__.Clear();
}
inline ::protobuf::Path* Glyph::mutable_default_(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Glyph.default)
  return _impl_.default__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
Glyph::mutable_default_() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.default)
  return &_impl_.default__;
}
inline const ::protobuf::Path& Glyph::_internal_default_(int index) const {
  return _impl_.default__.Get(index);
}
inline const ::protobuf::Path& Glyph::default_(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.default)
  return _internal_default_(index);
}
inline ::protobuf::Path* Glyph::_internal_add_default_() {
  return _impl_.default__.Add();
}
inline ::protobuf::Path* Glyph::add_default_() {
  ::protobuf::Path* _add = _internal_add_default_();
  // @@protoc_insertion_point(field_add:protobuf.Glyph.default)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
Glyph::default_() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.default)
  return _impl_.default__;
}

// repeated double limits = 4;
inline int Glyph::_internal_limits_size() const {
  return _impl_.limits_.size();
}
inline int Glyph::limits_size() const {
  return _internal_limits_size();
}
inline void Glyph::clear_limits() {
  _impl_.limits_.Clear();
}
inline double Glyph::_internal_limits(int index) const {
  return _impl_.limits_.Get(index);
}
inline double Glyph::limits(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.limits)
  return _internal_limits(index);
}
inline void Glyph::set_limits(int index, double value) {
  _impl_.limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.Glyph.limits)
}
inline void Glyph::_internal_add_limits(double value) {
  _impl_.limits_.Add(value);
}
inline void Glyph::add_limits(double value) {
  _internal_add_limits(value);
  // @@protoc_insertion_point(field_add:protobuf.Glyph.limits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Glyph::_internal_limits() const {
  return _impl_.limits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Glyph::limits() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.limits)
  return _internal_limits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Glyph::_internal_mutable_limits() {
  return &_impl_.limits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Glyph::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.limits)
  return _internal_mutable_limits();
}

// repeated .protobuf.Path minLeft = 5;
inline int Glyph::_internal_minleft_size() const {
  return _impl_.minleft_.size();
}
inline int Glyph::minleft_size() const {
  return _internal_minleft_size();
}
inline void Glyph::clear_minleft() {
  _impl_.minleft_.Clear();
}
inline ::protobuf::Path* Glyph::mutable_minleft(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Glyph.minLeft)
  return _impl_.minleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
Glyph::mutable_minleft() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.minLeft)
  return &_impl_.minleft_;
}
inline const ::protobuf::Path& Glyph::_internal_minleft(int index) const {
  return _impl_.minleft_.Get(index);
}
inline const ::protobuf::Path& Glyph::minleft(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.minLeft)
  return _internal_minleft(index);
}
inline ::protobuf::Path* Glyph::_internal_add_minleft() {
  return _impl_.minleft_.Add();
}
inline ::protobuf::Path* Glyph::add_minleft() {
  ::protobuf::Path* _add = _internal_add_minleft();
  // @@protoc_insertion_point(field_add:protobuf.Glyph.minLeft)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
Glyph::minleft() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.minLeft)
  return _impl_.minleft_;
}

// repeated .protobuf.Path maxLeft = 6;
inline int Glyph::_internal_maxleft_size() const {
  return _impl_.maxleft_.size();
}
inline int Glyph::maxleft_size() const {
  return _internal_maxleft_size();
}
inline void Glyph::clear_maxleft() {
  _impl_.maxleft_.Clear();
}
inline ::protobuf::Path* Glyph::mutable_maxleft(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Glyph.maxLeft)
  return _impl_.maxleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
Glyph::mutable_maxleft() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.maxLeft)
  return &_impl_.maxleft_;
}
inline const ::protobuf::Path& Glyph::_internal_maxleft(int index) const {
  return _impl_.maxleft_.Get(index);
}
inline const ::protobuf::Path& Glyph::maxleft(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.maxLeft)
  return _internal_maxleft(index);
}
inline ::protobuf::Path* Glyph::_internal_add_maxleft() {
  return _impl_.maxleft_.Add();
}
inline ::protobuf::Path* Glyph::add_maxleft() {
  ::protobuf::Path* _add = _internal_add_maxleft();
  // @@protoc_insertion_point(field_add:protobuf.Glyph.maxLeft)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
Glyph::maxleft() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.maxLeft)
  return _impl_.maxleft_;
}

// repeated .protobuf.Path minRight = 7;
inline int Glyph::_internal_minright_size() const {
  return _impl_.minright_.size();
}
inline int Glyph::minright_size() const {
  return _internal_minright_size();
}
inline void Glyph::clear_minright() {
  _impl_.minright_.Clear();
}
inline ::protobuf::Path* Glyph::mutable_minright(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Glyph.minRight)
  return _impl_.minright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
Glyph::mutable_minright() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.minRight)
  return &_impl_.minright_;
}
inline const ::protobuf::Path& Glyph::_internal_minright(int index) const {
  return _impl_.minright_.Get(index);
}
inline const ::protobuf::Path& Glyph::minright(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.minRight)
  return _internal_minright(index);
}
inline ::protobuf::Path* Glyph::_internal_add_minright() {
  return _impl_.minright_.Add();
}
inline ::protobuf::Path* Glyph::add_minright() {
  ::protobuf::Path* _add = _internal_add_minright();
  // @@protoc_insertion_point(field_add:protobuf.Glyph.minRight)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
Glyph::minright() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.minRight)
  return _impl_.minright_;
}

// repeated .protobuf.Path maxRight = 8;
inline int Glyph::_internal_maxright_size() const {
  return _impl_.maxright_.size();
}
inline int Glyph::maxright_size() const {
  return _internal_maxright_size();
}
inline void Glyph::clear_maxright() {
  _impl_.maxright_.Clear();
}
inline ::protobuf::Path* Glyph::mutable_maxright(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Glyph.maxRight)
  return _impl_.maxright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >*
Glyph::mutable_maxright() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Glyph.maxRight)
  return &_impl_.maxright_;
}
inline const ::protobuf::Path& Glyph::_internal_maxright(int index) const {
  return _impl_.maxright_.Get(index);
}
inline const ::protobuf::Path& Glyph::maxright(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Glyph.maxRight)
  return _internal_maxright(index);
}
inline ::protobuf::Path* Glyph::_internal_add_maxright() {
  return _impl_.maxright_.Add();
}
inline ::protobuf::Path* Glyph::add_maxright() {
  ::protobuf::Path* _add = _internal_add_maxright();
  // @@protoc_insertion_point(field_add:protobuf.Glyph.maxRight)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Path >&
Glyph::maxright() const {
  // @@protoc_insertion_point(field_list:protobuf.Glyph.maxRight)
  return _impl_.maxright_;
}

// -------------------------------------------------------------------

// Path

// repeated .protobuf.PathElem elems = 1;
inline int Path::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int Path::elems_size() const {
  return _internal_elems_size();
}
inline void Path::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::protobuf::PathElem* Path::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Path.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::PathElem >*
Path::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Path.elems)
  return &_impl_.elems_;
}
inline const ::protobuf::PathElem& Path::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::protobuf::PathElem& Path::elems(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Path.elems)
  return _internal_elems(index);
}
inline ::protobuf::PathElem* Path::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::protobuf::PathElem* Path::add_elems() {
  ::protobuf::PathElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:protobuf.Path.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::PathElem >&
Path::elems() const {
  // @@protoc_insertion_point(field_list:protobuf.Path.elems)
  return _impl_.elems_;
}

// repeated double color = 2;
inline int Path::_internal_color_size() const {
  return _impl_.color_.size();
}
inline int Path::color_size() const {
  return _internal_color_size();
}
inline void Path::clear_color() {
  _impl_.color_.Clear();
}
inline double Path::_internal_color(int index) const {
  return _impl_.color_.Get(index);
}
inline double Path::color(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Path.color)
  return _internal_color(index);
}
inline void Path::set_color(int index, double value) {
  _impl_.color_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.Path.color)
}
inline void Path::_internal_add_color(double value) {
  _impl_.color_.Add(value);
}
inline void Path::add_color(double value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:protobuf.Path.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Path::_internal_color() const {
  return _impl_.color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Path::color() const {
  // @@protoc_insertion_point(field_list:protobuf.Path.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Path::_internal_mutable_color() {
  return &_impl_.color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Path::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Path.color)
  return _internal_mutable_color();
}

// -------------------------------------------------------------------

// PathElem

// repeated double points = 1;
inline int PathElem::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PathElem::points_size() const {
  return _internal_points_size();
}
inline void PathElem::clear_points() {
  _impl_.points_.Clear();
}
inline double PathElem::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline double PathElem::points(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.PathElem.points)
  return _internal_points(index);
}
inline void PathElem::set_points(int index, double value) {
  _impl_.points_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.PathElem.points)
}
inline void PathElem::_internal_add_points(double value) {
  _impl_.points_.Add(value);
}
inline void PathElem::add_points(double value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:protobuf.PathElem.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PathElem::_internal_points() const {
  return _impl_.points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PathElem::points() const {
  // @@protoc_insertion_point(field_list:protobuf.PathElem.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PathElem::_internal_mutable_points() {
  return &_impl_.points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PathElem::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.PathElem.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// LayOut

// repeated .protobuf.Page pages = 1;
inline int LayOut::_internal_pages_size() const {
  return _impl_.pages_.size();
}
inline int LayOut::pages_size() const {
  return _internal_pages_size();
}
inline void LayOut::clear_pages() {
  _impl_.pages_.Clear();
}
inline ::protobuf::Page* LayOut::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.LayOut.pages)
  return _impl_.pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Page >*
LayOut::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.LayOut.pages)
  return &_impl_.pages_;
}
inline const ::protobuf::Page& LayOut::_internal_pages(int index) const {
  return _impl_.pages_.Get(index);
}
inline const ::protobuf::Page& LayOut::pages(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.LayOut.pages)
  return _internal_pages(index);
}
inline ::protobuf::Page* LayOut::_internal_add_pages() {
  return _impl_.pages_.Add();
}
inline ::protobuf::Page* LayOut::add_pages() {
  ::protobuf::Page* _add = _internal_add_pages();
  // @@protoc_insertion_point(field_add:protobuf.LayOut.pages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Page >&
LayOut::pages() const {
  // @@protoc_insertion_point(field_list:protobuf.LayOut.pages)
  return _impl_.pages_;
}

// repeated .protobuf.Sura suras = 2;
inline int LayOut::_internal_suras_size() const {
  return _impl_.suras_.size();
}
inline int LayOut::suras_size() const {
  return _internal_suras_size();
}
inline void LayOut::clear_suras() {
  _impl_.suras_.Clear();
}
inline ::protobuf::Sura* LayOut::mutable_suras(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.LayOut.suras)
  return _impl_.suras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Sura >*
LayOut::mutable_suras() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.LayOut.suras)
  return &_impl_.suras_;
}
inline const ::protobuf::Sura& LayOut::_internal_suras(int index) const {
  return _impl_.suras_.Get(index);
}
inline const ::protobuf::Sura& LayOut::suras(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.LayOut.suras)
  return _internal_suras(index);
}
inline ::protobuf::Sura* LayOut::_internal_add_suras() {
  return _impl_.suras_.Add();
}
inline ::protobuf::Sura* LayOut::add_suras() {
  ::protobuf::Sura* _add = _internal_add_suras();
  // @@protoc_insertion_point(field_add:protobuf.LayOut.suras)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Sura >&
LayOut::suras() const {
  // @@protoc_insertion_point(field_list:protobuf.LayOut.suras)
  return _impl_.suras_;
}

// -------------------------------------------------------------------

// Page

// repeated .protobuf.Line lines = 1;
inline int Page::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int Page::lines_size() const {
  return _internal_lines_size();
}
inline void Page::clear_lines() {
  _impl_.lines_.Clear();
}
inline ::protobuf::Line* Page::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Page.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Line >*
Page::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Page.lines)
  return &_impl_.lines_;
}
inline const ::protobuf::Line& Page::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::protobuf::Line& Page::lines(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Page.lines)
  return _internal_lines(index);
}
inline ::protobuf::Line* Page::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::protobuf::Line* Page::add_lines() {
  ::protobuf::Line* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:protobuf.Page.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Line >&
Page::lines() const {
  // @@protoc_insertion_point(field_list:protobuf.Page.lines)
  return _impl_.lines_;
}

// -------------------------------------------------------------------

// Line

// int32 type = 1;
inline void Line::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Line::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Line::type() const {
  // @@protoc_insertion_point(field_get:protobuf.Line.type)
  return _internal_type();
}
inline void Line::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Line::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protobuf.Line.type)
}

// int32 x = 2;
inline void Line::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Line::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Line::x() const {
  // @@protoc_insertion_point(field_get:protobuf.Line.x)
  return _internal_x();
}
inline void Line::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Line::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protobuf.Line.x)
}

// int32 y = 3;
inline void Line::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Line::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Line::y() const {
  // @@protoc_insertion_point(field_get:protobuf.Line.y)
  return _internal_y();
}
inline void Line::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Line::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protobuf.Line.y)
}

// string text = 4;
inline void Line::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Line::text() const {
  // @@protoc_insertion_point(field_get:protobuf.Line.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Line::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.Line.text)
}
inline std::string* Line::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:protobuf.Line.text)
  return _s;
}
inline const std::string& Line::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Line::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Line::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Line::release_text() {
  // @@protoc_insertion_point(field_release:protobuf.Line.text)
  return _impl_.text_.Release();
}
inline void Line::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.Line.text)
}

// repeated .protobuf.GlyphLayout glyphs = 5;
inline int Line::_internal_glyphs_size() const {
  return _impl_.glyphs_.size();
}
inline int Line::glyphs_size() const {
  return _internal_glyphs_size();
}
inline void Line::clear_glyphs() {
  _impl_.glyphs_.Clear();
}
inline ::protobuf::GlyphLayout* Line::mutable_glyphs(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Line.glyphs)
  return _impl_.glyphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::GlyphLayout >*
Line::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Line.glyphs)
  return &_impl_.glyphs_;
}
inline const ::protobuf::GlyphLayout& Line::_internal_glyphs(int index) const {
  return _impl_.glyphs_.Get(index);
}
inline const ::protobuf::GlyphLayout& Line::glyphs(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Line.glyphs)
  return _internal_glyphs(index);
}
inline ::protobuf::GlyphLayout* Line::_internal_add_glyphs() {
  return _impl_.glyphs_.Add();
}
inline ::protobuf::GlyphLayout* Line::add_glyphs() {
  ::protobuf::GlyphLayout* _add = _internal_add_glyphs();
  // @@protoc_insertion_point(field_add:protobuf.Line.glyphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::GlyphLayout >&
Line::glyphs() const {
  // @@protoc_insertion_point(field_list:protobuf.Line.glyphs)
  return _impl_.glyphs_;
}

// -------------------------------------------------------------------

// GlyphLayout

// int32 codepoint = 1;
inline void GlyphLayout::clear_codepoint() {
  _impl_.codepoint_ = 0;
}
inline int32_t GlyphLayout::_internal_codepoint() const {
  return _impl_.codepoint_;
}
inline int32_t GlyphLayout::codepoint() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.codepoint)
  return _internal_codepoint();
}
inline void GlyphLayout::_internal_set_codepoint(int32_t value) {
  
  _impl_.codepoint_ = value;
}
inline void GlyphLayout::set_codepoint(int32_t value) {
  _internal_set_codepoint(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.codepoint)
}

// int32 cluster = 2;
inline void GlyphLayout::clear_cluster() {
  _impl_.cluster_ = 0;
}
inline int32_t GlyphLayout::_internal_cluster() const {
  return _impl_.cluster_;
}
inline int32_t GlyphLayout::cluster() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.cluster)
  return _internal_cluster();
}
inline void GlyphLayout::_internal_set_cluster(int32_t value) {
  
  _impl_.cluster_ = value;
}
inline void GlyphLayout::set_cluster(int32_t value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.cluster)
}

// optional int32 x_advance = 3;
inline bool GlyphLayout::_internal_has_x_advance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GlyphLayout::has_x_advance() const {
  return _internal_has_x_advance();
}
inline void GlyphLayout::clear_x_advance() {
  _impl_.x_advance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t GlyphLayout::_internal_x_advance() const {
  return _impl_.x_advance_;
}
inline int32_t GlyphLayout::x_advance() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.x_advance)
  return _internal_x_advance();
}
inline void GlyphLayout::_internal_set_x_advance(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_advance_ = value;
}
inline void GlyphLayout::set_x_advance(int32_t value) {
  _internal_set_x_advance(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.x_advance)
}

// optional int32 x_offset = 4;
inline bool GlyphLayout::_internal_has_x_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GlyphLayout::has_x_offset() const {
  return _internal_has_x_offset();
}
inline void GlyphLayout::clear_x_offset() {
  _impl_.x_offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t GlyphLayout::_internal_x_offset() const {
  return _impl_.x_offset_;
}
inline int32_t GlyphLayout::x_offset() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.x_offset)
  return _internal_x_offset();
}
inline void GlyphLayout::_internal_set_x_offset(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_offset_ = value;
}
inline void GlyphLayout::set_x_offset(int32_t value) {
  _internal_set_x_offset(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.x_offset)
}

// optional int32 y_offset = 5;
inline bool GlyphLayout::_internal_has_y_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GlyphLayout::has_y_offset() const {
  return _internal_has_y_offset();
}
inline void GlyphLayout::clear_y_offset() {
  _impl_.y_offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t GlyphLayout::_internal_y_offset() const {
  return _impl_.y_offset_;
}
inline int32_t GlyphLayout::y_offset() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.y_offset)
  return _internal_y_offset();
}
inline void GlyphLayout::_internal_set_y_offset(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y_offset_ = value;
}
inline void GlyphLayout::set_y_offset(int32_t value) {
  _internal_set_y_offset(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.y_offset)
}

// optional int32 color = 6;
inline bool GlyphLayout::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GlyphLayout::has_color() const {
  return _internal_has_color();
}
inline void GlyphLayout::clear_color() {
  _impl_.color_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t GlyphLayout::_internal_color() const {
  return _impl_.color_;
}
inline int32_t GlyphLayout::color() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.color)
  return _internal_color();
}
inline void GlyphLayout::_internal_set_color(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.color_ = value;
}
inline void GlyphLayout::set_color(int32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.color)
}

// optional double lefttatweel = 7;
inline bool GlyphLayout::_internal_has_lefttatweel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GlyphLayout::has_lefttatweel() const {
  return _internal_has_lefttatweel();
}
inline void GlyphLayout::clear_lefttatweel() {
  _impl_.lefttatweel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double GlyphLayout::_internal_lefttatweel() const {
  return _impl_.lefttatweel_;
}
inline double GlyphLayout::lefttatweel() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.lefttatweel)
  return _internal_lefttatweel();
}
inline void GlyphLayout::_internal_set_lefttatweel(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lefttatweel_ = value;
}
inline void GlyphLayout::set_lefttatweel(double value) {
  _internal_set_lefttatweel(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.lefttatweel)
}

// optional double righttatweel = 8;
inline bool GlyphLayout::_internal_has_righttatweel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GlyphLayout::has_righttatweel() const {
  return _internal_has_righttatweel();
}
inline void GlyphLayout::clear_righttatweel() {
  _impl_.righttatweel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double GlyphLayout::_internal_righttatweel() const {
  return _impl_.righttatweel_;
}
inline double GlyphLayout::righttatweel() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.righttatweel)
  return _internal_righttatweel();
}
inline void GlyphLayout::_internal_set_righttatweel(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.righttatweel_ = value;
}
inline void GlyphLayout::set_righttatweel(double value) {
  _internal_set_righttatweel(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.righttatweel)
}

// optional bool beginsajda = 9;
inline bool GlyphLayout::_internal_has_beginsajda() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GlyphLayout::has_beginsajda() const {
  return _internal_has_beginsajda();
}
inline void GlyphLayout::clear_beginsajda() {
  _impl_.beginsajda_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool GlyphLayout::_internal_beginsajda() const {
  return _impl_.beginsajda_;
}
inline bool GlyphLayout::beginsajda() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.beginsajda)
  return _internal_beginsajda();
}
inline void GlyphLayout::_internal_set_beginsajda(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.beginsajda_ = value;
}
inline void GlyphLayout::set_beginsajda(bool value) {
  _internal_set_beginsajda(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.beginsajda)
}

// optional bool endsajda = 10;
inline bool GlyphLayout::_internal_has_endsajda() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GlyphLayout::has_endsajda() const {
  return _internal_has_endsajda();
}
inline void GlyphLayout::clear_endsajda() {
  _impl_.endsajda_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool GlyphLayout::_internal_endsajda() const {
  return _impl_.endsajda_;
}
inline bool GlyphLayout::endsajda() const {
  // @@protoc_insertion_point(field_get:protobuf.GlyphLayout.endsajda)
  return _internal_endsajda();
}
inline void GlyphLayout::_internal_set_endsajda(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.endsajda_ = value;
}
inline void GlyphLayout::set_endsajda(bool value) {
  _internal_set_endsajda(value);
  // @@protoc_insertion_point(field_set:protobuf.GlyphLayout.endsajda)
}

// -------------------------------------------------------------------

// Sura

// string name = 1;
inline void Sura::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Sura::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Sura.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sura::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.Sura.name)
}
inline std::string* Sura::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protobuf.Sura.name)
  return _s;
}
inline const std::string& Sura::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Sura::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Sura::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Sura::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.Sura.name)
  return _impl_.name_.Release();
}
inline void Sura::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.Sura.name)
}

// int32 page_number = 2;
inline void Sura::clear_page_number() {
  _impl_.page_number_ = 0;
}
inline int32_t Sura::_internal_page_number() const {
  return _impl_.page_number_;
}
inline int32_t Sura::page_number() const {
  // @@protoc_insertion_point(field_get:protobuf.Sura.page_number)
  return _internal_page_number();
}
inline void Sura::_internal_set_page_number(int32_t value) {
  
  _impl_.page_number_ = value;
}
inline void Sura::set_page_number(int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:protobuf.Sura.page_number)
}

// int32 x = 3;
inline void Sura::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Sura::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Sura::x() const {
  // @@protoc_insertion_point(field_get:protobuf.Sura.x)
  return _internal_x();
}
inline void Sura::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Sura::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protobuf.Sura.x)
}

// int32 y = 4;
inline void Sura::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Sura::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Sura::y() const {
  // @@protoc_insertion_point(field_get:protobuf.Sura.y)
  return _internal_y();
}
inline void Sura::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Sura::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protobuf.Sura.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_quran_2eproto
