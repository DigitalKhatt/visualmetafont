// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quran.proto

#include "quran.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf {
PROTOBUF_CONSTEXPR Font_GlyphsEntry_DoNotUse::Font_GlyphsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Font_GlyphsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Font_GlyphsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Font_GlyphsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Font_GlyphsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Font_GlyphsEntry_DoNotUseDefaultTypeInternal _Font_GlyphsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Font::Font(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.glyphs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FontDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontDefaultTypeInternal() {}
  union {
    Font _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontDefaultTypeInternal _Font_default_instance_;
PROTOBUF_CONSTEXPR Glyph::Glyph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bbox_)*/{}
  , /*decltype(_impl_.default__)*/{}
  , /*decltype(_impl_.limits_)*/{}
  , /*decltype(_impl_.minleft_)*/{}
  , /*decltype(_impl_.maxleft_)*/{}
  , /*decltype(_impl_.minright_)*/{}
  , /*decltype(_impl_.maxright_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlyphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlyphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlyphDefaultTypeInternal() {}
  union {
    Glyph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlyphDefaultTypeInternal _Glyph_default_instance_;
PROTOBUF_CONSTEXPR Path::Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{}
  , /*decltype(_impl_.color_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;
PROTOBUF_CONSTEXPR PathElem::PathElem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathElemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathElemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathElemDefaultTypeInternal() {}
  union {
    PathElem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathElemDefaultTypeInternal _PathElem_default_instance_;
PROTOBUF_CONSTEXPR LayOut::LayOut(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pages_)*/{}
  , /*decltype(_impl_.suras_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayOutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayOutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayOutDefaultTypeInternal() {}
  union {
    LayOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayOutDefaultTypeInternal _LayOut_default_instance_;
PROTOBUF_CONSTEXPR Page::Page(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageDefaultTypeInternal() {}
  union {
    Page _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageDefaultTypeInternal _Page_default_instance_;
PROTOBUF_CONSTEXPR Line::Line(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.glyphs_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;
PROTOBUF_CONSTEXPR GlyphLayout::GlyphLayout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.codepoint_)*/0
  , /*decltype(_impl_.x_advance_)*/0
  , /*decltype(_impl_.x_offset_)*/0
  , /*decltype(_impl_.y_offset_)*/0
  , /*decltype(_impl_.lefttatweel_)*/0
  , /*decltype(_impl_.righttatweel_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.beginsajda_)*/false
  , /*decltype(_impl_.endsajda_)*/false} {}
struct GlyphLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlyphLayoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlyphLayoutDefaultTypeInternal() {}
  union {
    GlyphLayout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlyphLayoutDefaultTypeInternal _GlyphLayout_default_instance_;
PROTOBUF_CONSTEXPR Sura::Sura(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_number_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SuraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuraDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuraDefaultTypeInternal() {}
  union {
    Sura _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuraDefaultTypeInternal _Sura_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_quran_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_quran_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_quran_2eproto = nullptr;

const uint32_t TableStruct_quran_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::Font_GlyphsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Font_GlyphsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Font_GlyphsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Font_GlyphsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::Font, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Font, _impl_.glyphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.bbox_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.default__),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.limits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.minleft_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.maxleft_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.minright_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Glyph, _impl_.maxright_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Path, _impl_.elems_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Path, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::PathElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::PathElem, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::LayOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::LayOut, _impl_.pages_),
  PROTOBUF_FIELD_OFFSET(::protobuf::LayOut, _impl_.suras_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::Page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Page, _impl_.lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.glyphs_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.codepoint_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.x_advance_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.x_offset_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.y_offset_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.lefttatweel_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.righttatweel_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.beginsajda_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GlyphLayout, _impl_.endsajda_),
  ~0u,
  0,
  1,
  2,
  5,
  3,
  4,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::Sura, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::Sura, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Sura, _impl_.page_number_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Sura, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Sura, _impl_.y_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protobuf::Font_GlyphsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::protobuf::Font)},
  { 17, -1, -1, sizeof(::protobuf::Glyph)},
  { 31, -1, -1, sizeof(::protobuf::Path)},
  { 39, -1, -1, sizeof(::protobuf::PathElem)},
  { 46, -1, -1, sizeof(::protobuf::LayOut)},
  { 54, -1, -1, sizeof(::protobuf::Page)},
  { 61, -1, -1, sizeof(::protobuf::Line)},
  { 71, 86, -1, sizeof(::protobuf::GlyphLayout)},
  { 95, -1, -1, sizeof(::protobuf::Sura)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf::_Font_GlyphsEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_Font_default_instance_._instance,
  &::protobuf::_Glyph_default_instance_._instance,
  &::protobuf::_Path_default_instance_._instance,
  &::protobuf::_PathElem_default_instance_._instance,
  &::protobuf::_LayOut_default_instance_._instance,
  &::protobuf::_Page_default_instance_._instance,
  &::protobuf::_Line_default_instance_._instance,
  &::protobuf::_GlyphLayout_default_instance_._instance,
  &::protobuf::_Sura_default_instance_._instance,
};

const char descriptor_table_protodef_quran_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013quran.proto\022\010protobuf\"r\n\004Font\022*\n\006glyph"
  "s\030\001 \003(\0132\032.protobuf.Font.GlyphsEntry\032>\n\013G"
  "lyphsEntry\022\013\n\003key\030\001 \001(\005\022\036\n\005value\030\002 \001(\0132\017"
  ".protobuf.Glyph:\0028\001\"\332\001\n\005Glyph\022\014\n\004name\030\001 "
  "\001(\t\022\014\n\004bbox\030\002 \003(\001\022\037\n\007default\030\003 \003(\0132\016.pro"
  "tobuf.Path\022\016\n\006limits\030\004 \003(\001\022\037\n\007minLeft\030\005 "
  "\003(\0132\016.protobuf.Path\022\037\n\007maxLeft\030\006 \003(\0132\016.p"
  "rotobuf.Path\022 \n\010minRight\030\007 \003(\0132\016.protobu"
  "f.Path\022 \n\010maxRight\030\010 \003(\0132\016.protobuf.Path"
  "\"8\n\004Path\022!\n\005elems\030\001 \003(\0132\022.protobuf.PathE"
  "lem\022\r\n\005color\030\002 \003(\001\"\032\n\010PathElem\022\016\n\006points"
  "\030\001 \003(\001\"F\n\006LayOut\022\035\n\005pages\030\001 \003(\0132\016.protob"
  "uf.Page\022\035\n\005suras\030\002 \003(\0132\016.protobuf.Sura\"%"
  "\n\004Page\022\035\n\005lines\030\001 \003(\0132\016.protobuf.Line\"Q\n"
  "\004Line\022%\n\006glyphs\030\001 \003(\0132\025.protobuf.GlyphLa"
  "yout\022\014\n\004type\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005"
  "\"\316\002\n\013GlyphLayout\022\021\n\tcodepoint\030\001 \001(\005\022\026\n\tx"
  "_advance\030\002 \001(\005H\000\210\001\001\022\025\n\010x_offset\030\003 \001(\005H\001\210"
  "\001\001\022\025\n\010y_offset\030\004 \001(\005H\002\210\001\001\022\022\n\005color\030\005 \001(\005"
  "H\003\210\001\001\022\030\n\013lefttatweel\030\006 \001(\001H\004\210\001\001\022\031\n\014right"
  "tatweel\030\007 \001(\001H\005\210\001\001\022\027\n\nbeginsajda\030\010 \001(\010H\006"
  "\210\001\001\022\025\n\010endsajda\030\t \001(\010H\007\210\001\001B\014\n\n_x_advance"
  "B\013\n\t_x_offsetB\013\n\t_y_offsetB\010\n\006_colorB\016\n\014"
  "_lefttatweelB\017\n\r_righttatweelB\r\n\013_begins"
  "ajdaB\013\n\t_endsajda\"\?\n\004Sura\022\014\n\004name\030\001 \001(\t\022"
  "\023\n\013page_number\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001"
  "(\005B$\n org.digitalkhatt.mushaf.protobufP\001"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_quran_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_quran_2eproto = {
    false, false, 1088, descriptor_table_protodef_quran_2eproto,
    "quran.proto",
    &descriptor_table_quran_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_quran_2eproto::offsets,
    file_level_metadata_quran_2eproto, file_level_enum_descriptors_quran_2eproto,
    file_level_service_descriptors_quran_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_quran_2eproto_getter() {
  return &descriptor_table_quran_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_quran_2eproto(&descriptor_table_quran_2eproto);
namespace protobuf {

// ===================================================================

Font_GlyphsEntry_DoNotUse::Font_GlyphsEntry_DoNotUse() {}
Font_GlyphsEntry_DoNotUse::Font_GlyphsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Font_GlyphsEntry_DoNotUse::MergeFrom(const Font_GlyphsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Font_GlyphsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[0]);
}

// ===================================================================

class Font::_Internal {
 public:
};

Font::Font(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Font::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.Font)
}
Font::Font(const Font& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Font* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.glyphs_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.glyphs_.MergeFrom(from._impl_.glyphs_);
  // @@protoc_insertion_point(copy_constructor:protobuf.Font)
}

inline void Font::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.glyphs_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Font::~Font() {
  // @@protoc_insertion_point(destructor:protobuf.Font)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Font::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.glyphs_.Destruct();
  _impl_.glyphs_.~MapField();
}

void Font::ArenaDtor(void* object) {
  Font* _this = reinterpret_cast< Font* >(object);
  _this->_impl_.glyphs_.Destruct();
}
void Font::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Font::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Font)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.glyphs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Font::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf.Glyph> glyphs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.glyphs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Font::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Font)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf.Glyph> glyphs = 1;
  if (!this->_internal_glyphs().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf::Glyph>;
    using WireHelper = Font_GlyphsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_glyphs();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Font)
  return target;
}

size_t Font::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Font)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf.Glyph> glyphs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_glyphs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf::Glyph >::const_iterator
      it = this->_internal_glyphs().begin();
      it != this->_internal_glyphs().end(); ++it) {
    total_size += Font_GlyphsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Font::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Font::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Font::GetClassData() const { return &_class_data_; }


void Font::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Font*>(&to_msg);
  auto& from = static_cast<const Font&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Font)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.glyphs_.MergeFrom(from._impl_.glyphs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Font::CopyFrom(const Font& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Font)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Font::IsInitialized() const {
  return true;
}

void Font::InternalSwap(Font* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.glyphs_.InternalSwap(&other->_impl_.glyphs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Font::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[1]);
}

// ===================================================================

class Glyph::_Internal {
 public:
};

Glyph::Glyph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.Glyph)
}
Glyph::Glyph(const Glyph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Glyph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bbox_){from._impl_.bbox_}
    , decltype(_impl_.default__){from._impl_.default__}
    , decltype(_impl_.limits_){from._impl_.limits_}
    , decltype(_impl_.minleft_){from._impl_.minleft_}
    , decltype(_impl_.maxleft_){from._impl_.maxleft_}
    , decltype(_impl_.minright_){from._impl_.minright_}
    , decltype(_impl_.maxright_){from._impl_.maxright_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf.Glyph)
}

inline void Glyph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bbox_){arena}
    , decltype(_impl_.default__){arena}
    , decltype(_impl_.limits_){arena}
    , decltype(_impl_.minleft_){arena}
    , decltype(_impl_.maxleft_){arena}
    , decltype(_impl_.minright_){arena}
    , decltype(_impl_.maxright_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Glyph::~Glyph() {
  // @@protoc_insertion_point(destructor:protobuf.Glyph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Glyph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bbox_.~RepeatedField();
  _impl_.default__.~RepeatedPtrField();
  _impl_.limits_.~RepeatedField();
  _impl_.minleft_.~RepeatedPtrField();
  _impl_.maxleft_.~RepeatedPtrField();
  _impl_.minright_.~RepeatedPtrField();
  _impl_.maxright_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Glyph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Glyph::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Glyph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bbox_.Clear();
  _impl_.default__.Clear();
  _impl_.limits_.Clear();
  _impl_.minleft_.Clear();
  _impl_.maxleft_.Clear();
  _impl_.minright_.Clear();
  _impl_.maxright_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Glyph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.Glyph.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double bbox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bbox(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_bbox(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.Path default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double limits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_limits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_limits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.Path minLeft = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minleft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.Path maxLeft = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maxleft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.Path minRight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minright(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.Path maxRight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maxright(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Glyph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Glyph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Glyph.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated double bbox = 2;
  if (this->_internal_bbox_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_bbox(), target);
  }

  // repeated .protobuf.Path default = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_default__size()); i < n; i++) {
    const auto& repfield = this->_internal_default_(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double limits = 4;
  if (this->_internal_limits_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_limits(), target);
  }

  // repeated .protobuf.Path minLeft = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minleft_size()); i < n; i++) {
    const auto& repfield = this->_internal_minleft(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf.Path maxLeft = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maxleft_size()); i < n; i++) {
    const auto& repfield = this->_internal_maxleft(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf.Path minRight = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minright_size()); i < n; i++) {
    const auto& repfield = this->_internal_minright(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf.Path maxRight = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maxright_size()); i < n; i++) {
    const auto& repfield = this->_internal_maxright(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Glyph)
  return target;
}

size_t Glyph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Glyph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bbox = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bbox_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .protobuf.Path default = 3;
  total_size += 1UL * this->_internal_default__size();
  for (const auto& msg : this->_impl_.default__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double limits = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_limits_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .protobuf.Path minLeft = 5;
  total_size += 1UL * this->_internal_minleft_size();
  for (const auto& msg : this->_impl_.minleft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.Path maxLeft = 6;
  total_size += 1UL * this->_internal_maxleft_size();
  for (const auto& msg : this->_impl_.maxleft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.Path minRight = 7;
  total_size += 1UL * this->_internal_minright_size();
  for (const auto& msg : this->_impl_.minright_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.Path maxRight = 8;
  total_size += 1UL * this->_internal_maxright_size();
  for (const auto& msg : this->_impl_.maxright_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Glyph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Glyph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Glyph::GetClassData() const { return &_class_data_; }


void Glyph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Glyph*>(&to_msg);
  auto& from = static_cast<const Glyph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Glyph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bbox_.MergeFrom(from._impl_.bbox_);
  _this->_impl_.default__.MergeFrom(from._impl_.default__);
  _this->_impl_.limits_.MergeFrom(from._impl_.limits_);
  _this->_impl_.minleft_.MergeFrom(from._impl_.minleft_);
  _this->_impl_.maxleft_.MergeFrom(from._impl_.maxleft_);
  _this->_impl_.minright_.MergeFrom(from._impl_.minright_);
  _this->_impl_.maxright_.MergeFrom(from._impl_.maxright_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Glyph::CopyFrom(const Glyph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Glyph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Glyph::IsInitialized() const {
  return true;
}

void Glyph::InternalSwap(Glyph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bbox_.InternalSwap(&other->_impl_.bbox_);
  _impl_.default__.InternalSwap(&other->_impl_.default__);
  _impl_.limits_.InternalSwap(&other->_impl_.limits_);
  _impl_.minleft_.InternalSwap(&other->_impl_.minleft_);
  _impl_.maxleft_.InternalSwap(&other->_impl_.maxleft_);
  _impl_.minright_.InternalSwap(&other->_impl_.minright_);
  _impl_.maxright_.InternalSwap(&other->_impl_.maxright_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Glyph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[2]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){from._impl_.elems_}
    , decltype(_impl_.color_){from._impl_.color_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.Path)
}

inline void Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){arena}
    , decltype(_impl_.color_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:protobuf.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.~RepeatedPtrField();
  _impl_.color_.~RepeatedField();
}

void Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.Clear();
  _impl_.color_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.PathElem elems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.PathElem elems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elems_size()); i < n; i++) {
    const auto& repfield = this->_internal_elems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double color = 2;
  if (this->_internal_color_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.PathElem elems = 1;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->_impl_.elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double color = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_color_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }


void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Path*>(&to_msg);
  auto& from = static_cast<const Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elems_.MergeFrom(from._impl_.elems_);
  _this->_impl_.color_.MergeFrom(from._impl_.color_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elems_.InternalSwap(&other->_impl_.elems_);
  _impl_.color_.InternalSwap(&other->_impl_.color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[3]);
}

// ===================================================================

class PathElem::_Internal {
 public:
};

PathElem::PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.PathElem)
}
PathElem::PathElem(const PathElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathElem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.PathElem)
}

inline void PathElem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathElem::~PathElem() {
  // @@protoc_insertion_point(destructor:protobuf.PathElem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathElem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedField();
}

void PathElem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathElem::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.PathElem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathElem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathElem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.PathElem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.PathElem)
  return target;
}

size_t PathElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.PathElem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathElem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathElem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathElem::GetClassData() const { return &_class_data_; }


void PathElem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathElem*>(&to_msg);
  auto& from = static_cast<const PathElem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.PathElem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathElem::CopyFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.PathElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathElem::IsInitialized() const {
  return true;
}

void PathElem::InternalSwap(PathElem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathElem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[4]);
}

// ===================================================================

class LayOut::_Internal {
 public:
};

LayOut::LayOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.LayOut)
}
LayOut::LayOut(const LayOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayOut* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pages_){from._impl_.pages_}
    , decltype(_impl_.suras_){from._impl_.suras_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.LayOut)
}

inline void LayOut::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pages_){arena}
    , decltype(_impl_.suras_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LayOut::~LayOut() {
  // @@protoc_insertion_point(destructor:protobuf.LayOut)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pages_.~RepeatedPtrField();
  _impl_.suras_.~RepeatedPtrField();
}

void LayOut::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayOut::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.LayOut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pages_.Clear();
  _impl_.suras_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayOut::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.Page pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.Sura suras = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayOut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.LayOut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.Page pages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pages_size()); i < n; i++) {
    const auto& repfield = this->_internal_pages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf.Sura suras = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_suras_size()); i < n; i++) {
    const auto& repfield = this->_internal_suras(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.LayOut)
  return target;
}

size_t LayOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.LayOut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.Page pages = 1;
  total_size += 1UL * this->_internal_pages_size();
  for (const auto& msg : this->_impl_.pages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.Sura suras = 2;
  total_size += 1UL * this->_internal_suras_size();
  for (const auto& msg : this->_impl_.suras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayOut::GetClassData() const { return &_class_data_; }


void LayOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayOut*>(&to_msg);
  auto& from = static_cast<const LayOut&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.LayOut)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pages_.MergeFrom(from._impl_.pages_);
  _this->_impl_.suras_.MergeFrom(from._impl_.suras_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayOut::CopyFrom(const LayOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.LayOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayOut::IsInitialized() const {
  return true;
}

void LayOut::InternalSwap(LayOut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pages_.InternalSwap(&other->_impl_.pages_);
  _impl_.suras_.InternalSwap(&other->_impl_.suras_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayOut::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[5]);
}

// ===================================================================

class Page::_Internal {
 public:
};

Page::Page(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.Page)
}
Page::Page(const Page& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Page* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){from._impl_.lines_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.Page)
}

inline void Page::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:protobuf.Page)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Page::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
}

void Page::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Page)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Page::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.Line lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Page::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Page)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.Line lines = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Page)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.Line lines = 1;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_impl_.lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Page::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Page::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Page::GetClassData() const { return &_class_data_; }


void Page::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Page*>(&to_msg);
  auto& from = static_cast<const Page&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Page)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  return true;
}

void Page::InternalSwap(Page* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Page::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[6]);
}

// ===================================================================

class Line::_Internal {
 public:
};

Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Line* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.glyphs_){from._impl_.glyphs_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Line)
}

inline void Line::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.glyphs_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:protobuf.Line)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.glyphs_.~RepeatedPtrField();
}

void Line::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Line)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.glyphs_.Clear();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.GlyphLayout glyphs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_glyphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Line)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.GlyphLayout glyphs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_glyphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_glyphs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Line)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.GlyphLayout glyphs = 1;
  total_size += 1UL * this->_internal_glyphs_size();
  for (const auto& msg : this->_impl_.glyphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }


void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Line)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.glyphs_.MergeFrom(from._impl_.glyphs_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.glyphs_.InternalSwap(&other->_impl_.glyphs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, _impl_.y_)
      + sizeof(Line::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Line, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[7]);
}

// ===================================================================

class GlyphLayout::_Internal {
 public:
  using HasBits = decltype(std::declval<GlyphLayout>()._impl_._has_bits_);
  static void set_has_x_advance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lefttatweel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_righttatweel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_beginsajda(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_endsajda(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

GlyphLayout::GlyphLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.GlyphLayout)
}
GlyphLayout::GlyphLayout(const GlyphLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlyphLayout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.codepoint_){}
    , decltype(_impl_.x_advance_){}
    , decltype(_impl_.x_offset_){}
    , decltype(_impl_.y_offset_){}
    , decltype(_impl_.lefttatweel_){}
    , decltype(_impl_.righttatweel_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.beginsajda_){}
    , decltype(_impl_.endsajda_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.codepoint_, &from._impl_.codepoint_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endsajda_) -
    reinterpret_cast<char*>(&_impl_.codepoint_)) + sizeof(_impl_.endsajda_));
  // @@protoc_insertion_point(copy_constructor:protobuf.GlyphLayout)
}

inline void GlyphLayout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.codepoint_){0}
    , decltype(_impl_.x_advance_){0}
    , decltype(_impl_.x_offset_){0}
    , decltype(_impl_.y_offset_){0}
    , decltype(_impl_.lefttatweel_){0}
    , decltype(_impl_.righttatweel_){0}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.beginsajda_){false}
    , decltype(_impl_.endsajda_){false}
  };
}

GlyphLayout::~GlyphLayout() {
  // @@protoc_insertion_point(destructor:protobuf.GlyphLayout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlyphLayout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlyphLayout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlyphLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.GlyphLayout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.codepoint_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.x_advance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.endsajda_) -
        reinterpret_cast<char*>(&_impl_.x_advance_)) + sizeof(_impl_.endsajda_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlyphLayout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 codepoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.codepoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x_advance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x_advance(&has_bits);
          _impl_.x_advance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x_offset(&has_bits);
          _impl_.x_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y_offset(&has_bits);
          _impl_.y_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lefttatweel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_lefttatweel(&has_bits);
          _impl_.lefttatweel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double righttatweel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_righttatweel(&has_bits);
          _impl_.righttatweel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool beginsajda = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_beginsajda(&has_bits);
          _impl_.beginsajda_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool endsajda = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_endsajda(&has_bits);
          _impl_.endsajda_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlyphLayout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.GlyphLayout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 codepoint = 1;
  if (this->_internal_codepoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_codepoint(), target);
  }

  // optional int32 x_advance = 2;
  if (_internal_has_x_advance()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_advance(), target);
  }

  // optional int32 x_offset = 3;
  if (_internal_has_x_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x_offset(), target);
  }

  // optional int32 y_offset = 4;
  if (_internal_has_y_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y_offset(), target);
  }

  // optional int32 color = 5;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_color(), target);
  }

  // optional double lefttatweel = 6;
  if (_internal_has_lefttatweel()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_lefttatweel(), target);
  }

  // optional double righttatweel = 7;
  if (_internal_has_righttatweel()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_righttatweel(), target);
  }

  // optional bool beginsajda = 8;
  if (_internal_has_beginsajda()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_beginsajda(), target);
  }

  // optional bool endsajda = 9;
  if (_internal_has_endsajda()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_endsajda(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.GlyphLayout)
  return target;
}

size_t GlyphLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.GlyphLayout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 codepoint = 1;
  if (this->_internal_codepoint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_codepoint());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 x_advance = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_advance());
    }

    // optional int32 x_offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_offset());
    }

    // optional int32 y_offset = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_offset());
    }

    // optional double lefttatweel = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double righttatweel = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 color = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
    }

    // optional bool beginsajda = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool endsajda = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlyphLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlyphLayout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlyphLayout::GetClassData() const { return &_class_data_; }


void GlyphLayout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlyphLayout*>(&to_msg);
  auto& from = static_cast<const GlyphLayout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.GlyphLayout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_codepoint() != 0) {
    _this->_internal_set_codepoint(from._internal_codepoint());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_advance_ = from._impl_.x_advance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_offset_ = from._impl_.x_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_offset_ = from._impl_.y_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lefttatweel_ = from._impl_.lefttatweel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.righttatweel_ = from._impl_.righttatweel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.beginsajda_ = from._impl_.beginsajda_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.endsajda_ = from._impl_.endsajda_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlyphLayout::CopyFrom(const GlyphLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.GlyphLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlyphLayout::IsInitialized() const {
  return true;
}

void GlyphLayout::InternalSwap(GlyphLayout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlyphLayout, _impl_.endsajda_)
      + sizeof(GlyphLayout::_impl_.endsajda_)
      - PROTOBUF_FIELD_OFFSET(GlyphLayout, _impl_.codepoint_)>(
          reinterpret_cast<char*>(&_impl_.codepoint_),
          reinterpret_cast<char*>(&other->_impl_.codepoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlyphLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[8]);
}

// ===================================================================

class Sura::_Internal {
 public:
};

Sura::Sura(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.Sura)
}
Sura::Sura(const Sura& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sura* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.page_number_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.page_number_, &from._impl_.page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.page_number_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Sura)
}

inline void Sura::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.page_number_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sura::~Sura() {
  // @@protoc_insertion_point(destructor:protobuf.Sura)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sura::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Sura::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sura::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Sura)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.page_number_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sura::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.Sura.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sura::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Sura)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Sura.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_number(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Sura)
  return target;
}

size_t Sura::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Sura)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_number());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sura::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sura::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sura::GetClassData() const { return &_class_data_; }


void Sura::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sura*>(&to_msg);
  auto& from = static_cast<const Sura&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Sura)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_page_number() != 0) {
    _this->_internal_set_page_number(from._internal_page_number());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sura::CopyFrom(const Sura& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Sura)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sura::IsInitialized() const {
  return true;
}

void Sura::InternalSwap(Sura* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sura, _impl_.y_)
      + sizeof(Sura::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Sura, _impl_.page_number_)>(
          reinterpret_cast<char*>(&_impl_.page_number_),
          reinterpret_cast<char*>(&other->_impl_.page_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sura::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_quran_2eproto_getter, &descriptor_table_quran_2eproto_once,
      file_level_metadata_quran_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::Font_GlyphsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::Font_GlyphsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Font_GlyphsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Font*
Arena::CreateMaybeMessage< ::protobuf::Font >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Font >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Glyph*
Arena::CreateMaybeMessage< ::protobuf::Glyph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Glyph >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Path*
Arena::CreateMaybeMessage< ::protobuf::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::PathElem*
Arena::CreateMaybeMessage< ::protobuf::PathElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::PathElem >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::LayOut*
Arena::CreateMaybeMessage< ::protobuf::LayOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::LayOut >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Page*
Arena::CreateMaybeMessage< ::protobuf::Page >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Page >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Line*
Arena::CreateMaybeMessage< ::protobuf::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::GlyphLayout*
Arena::CreateMaybeMessage< ::protobuf::GlyphLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::GlyphLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Sura*
Arena::CreateMaybeMessage< ::protobuf::Sura >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Sura >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
