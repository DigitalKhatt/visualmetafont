/*
 * Copyright (c) 2015-2020 Amine Anane. http: //digitalkhatt/license
 * This file is part of DigitalKhatt.
 *
 * DigitalKhatt is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * DigitalKhatt is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with DigitalKhatt. If not, see
 * <https: //www.gnu.org/licenses />.
*/

// $Id$

#ifndef FEASCANNER_H
#define FEASCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.



#ifndef YY_DECL

#define	YY_DECL						\
    int				\
    glyphparser::Scanner::lex(				\
	glyphparser::Parser::semantic_type* yylval,		\
	glyphparser::Parser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer GlyphFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "glyphparser.hpp"

namespace glyphparser {

	/** Scanner is a derived class to add some extra function to the scanner
	 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
	 * macros to ExampleFlexLexer. However we change the context of the generated
	 * yylex() function to be contained within the Scanner class. This is required
	 * because the yylex() defined in ExampleFlexLexer has no parameters. */
	class Scanner : public GlyphFlexLexer
	{
	public:
		/** Create a new scanner object. The streams arg_yyin and arg_yyout default
		 * to cin and cout, but that assignment is only made when initializing in
		 * yylex(). */
		Scanner(std::istream* arg_yyin = 0,
			std::ostream* arg_yyout = 0);

		/** Required for virtual functions */
		virtual ~Scanner();

		/** This is the main lexing function. It is generated by flex according to
		 * the macro declaration YY_DECL above. The generated bison parser then
		 * calls this virtual function to fetch new tokens. */
		virtual int lex(
			Parser::semantic_type* yylval,
			Parser::location_type* yylloc
		);

		/** Enable debug output (via arg_yyout) if compiled into the scanner. */
		void set_debug(bool b);

		void begin_dir_state();

		void end_dir_state();

	};

}

#endif // FEASCANNER_H